package testsParcelPickupFrontend;

import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import main.java.*;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class ExistingPickupWithinOneHour {
	private static WebDriver driver;
	private static Helper helper;

	@BeforeClass
	public static void setUp() throws Exception {
		helper = Helper.getInstance();
		driver = Helper.getDriver();
		driver.manage().window().setSize(new Dimension(1360, 1000));
		System.out.println("Starting test " + new Object() {
		}.getClass().getEnclosingMethod().getName());
		driver.navigate().to(helper.getProperty("stagingHome"));
		String user = "erpUser";
		String password = "erpPassword";
		helper.signInCP(driver, user, password);
	}

	@Test
	public void existingPickupWithinOneHour() throws InterruptedException {
		System.out.println("Starting test " + new Object() {
		}.getClass().getEnclosingMethod().getName());
		driver.navigate().to(helper.getProperty("parcelPickup"));
		helper.closeCookieBanner(driver);
		Thread.sleep(2000);
		///click on alternate address 
		driver.findElement(By.xpath("//div[text()='Use an alternate address']")).click();
		
		WebElement addressInput = driver.findElement(By.className("addressCompleteInput"));
		Thread.sleep(1000);
		helper.addBoarder(driver, addressInput);
		addressInput.sendKeys("3653 Chiplow Rd");
		Thread.sleep(3000);
		addressInput.sendKeys(Keys.ENTER);
		Thread.sleep(3000);
		addressInput.sendKeys(Keys.ENTER);
		Thread.sleep(3000);
		///instructions
		WebElement instruction = driver.findElement(By.tagName("app-instructions"));
		instruction.findElement(By.className("arrow-down")).click();
		Thread.sleep(1000);
		try {
			WebElement container = instruction.findElement(By.className("visible-menu"));
		} catch (Exception e) {
			instruction.findElement(By.className("arrow-down")).click();
		}
		WebElement container = driver.findElement(By.className("visible-menu"));
		WebElement ulist = container.findElement(By.tagName("ul"));
		List<WebElement> dragAndDropList = ulist.findElements(By.tagName("li"));
		Object[] dragAndDropArary = dragAndDropList.toArray();
		((WebElement) dragAndDropArary[3]).click();
		/// check box send e-mail adress
		driver.findElement(By.cssSelector("label[for=emailUpdates]")).click();
		//// buton continue
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(5000);
		//////Packing
		//Quantity and weight
		WebElement numberOfItems = driver.findElement(By.id("packingNumberOfItems"));
		numberOfItems.sendKeys("3");
		WebElement averageWeight = driver.findElement(By.id("packingWeightOfItems"));
		averageWeight.sendKeys("5");
		WebElement packingOverWeight = driver.findElement(By.cssSelector("label[for=packingOverWeight]"));
		packingOverWeight.click();
		Thread.sleep(1000);
		//shiping services 
		WebElement packingShippingPriority = driver.findElement(By.cssSelector("#main-content > div > div > app-root > div > app-packing > div > div.packing-container.medium-8.large-7.columns > form > div.item-container.shipping-services-container.large-11 > div:nth-child(2) > div:nth-child(1) > label"));
		packingShippingPriority.click();
		//Submit page
		driver.findElement(By.id("packingSubmit")).click();	
		Thread.sleep(2000);
		//// Data and time
		/// Page title
		WebElement title = driver.findElement(By.tagName("h2"));
		helper.addBoarder(driver, title);
		Assert.assertEquals("Date and time", title.getText());
		/// Calendar

		WebElement month;
		WebElement errorMsg = title;
		int randomDay = 0;
		int randomTime = 0;
		List<WebElement> daysList;
		Object[] daysArary;
		Thread.sleep(7000);
		WebElement reviewSubmit = null;
		while (reviewSubmit == null) {
			
			while (errorMsg != null) {

				driver.findElement(By.className("btn-calendar")).click();
				month = driver.findElement(By.className("ngb-dp-month"));
				helper.addBoarder(driver, month);
				daysList = driver.findElements(By.xpath("//*[@class='btn-light']"));
				daysArary = daysList.toArray();

				randomDay = ThreadLocalRandom.current().nextInt(0, daysArary.length);
				WebElement day = ((WebElement) daysArary[randomDay]);
				helper.addBoarder(driver, day);
				day.click();
				Thread.sleep(1000);
				/// starting time
				driver.findElement(By.id("datetimePickupTimeDropdown")).click();
				Thread.sleep(2000);
				List<WebElement> staringTimeList = driver.findElements(By.cssSelector("li[role=option]"));
				Object[] staringTimeArary = staringTimeList.toArray();
				randomTime = ThreadLocalRandom.current().nextInt(1, staringTimeArary.length);
				((WebElement) staringTimeArary[randomTime]).click();
				Thread.sleep(3000);
				errorMsg = helper.FindElementSafe(driver, By.className("alert-message-container"));
			}

			/// Business closing time
			Thread.sleep(3000);
			driver.findElement(By.id("datetimeClosingTimeDropdown")).click();
			List<WebElement> businessTimeList = driver.findElements(By.cssSelector("li[role=option]"));
			Object[] businessTimeArary = businessTimeList.toArray();
			int randomBussinesTime = ThreadLocalRandom.current().nextInt(1, businessTimeArary.length);
			((WebElement) businessTimeArary[randomBussinesTime]).click();
			Thread.sleep(1000);
			///// submit page
			driver.findElement(By.id("datetimeSubmit")).click();
			Thread.sleep(5000);
			////if it goes to CRM page request is not created...go back to calendar page and  try again 
			reviewSubmit = helper.FindElementSafe(driver, By.id("reviewSubmit"));
			if (reviewSubmit==null)
			{
				driver.navigate().back();
				Thread.sleep(2000);
			}
			
			

		}

		reviewSubmit.click();
		Thread.sleep(5000);
		///// try to crate request for same date and time
		System.out.println("Starting test " + new Object() {
		}.getClass().getEnclosingMethod().getName());
		driver.navigate().to(helper.getProperty("parcelPickup"));
		helper.closeCookieBanner(driver);
		Thread.sleep(2000);
		///click on alternate address 
		driver.findElement(By.xpath("//div[text()='Use an alternate address']")).click();
		
		addressInput = driver.findElement(By.className("addressCompleteInput"));
		Thread.sleep(1000);
		helper.addBoarder(driver, addressInput);
		addressInput.sendKeys("3653 Chiplow Rd");
		Thread.sleep(3000);
		addressInput.sendKeys(Keys.ENTER);
		Thread.sleep(3000);
		addressInput.sendKeys(Keys.ENTER);
		Thread.sleep(3000);
		instruction = driver.findElement(By.tagName("app-instructions"));
		instruction.findElement(By.className("arrow-down")).click();
		Thread.sleep(1000);
		try {
			container = instruction.findElement(By.className("visible-menu"));
		} catch (Exception e) {
			instruction.findElement(By.className("arrow-down")).click();
		}
		container = driver.findElement(By.className("visible-menu"));
		ulist = container.findElement(By.tagName("ul"));
		dragAndDropList = ulist.findElements(By.tagName("li"));
		dragAndDropArary = dragAndDropList.toArray();
		((WebElement) dragAndDropArary[3]).click();
		/// check box send e-mail adress
		driver.findElement(By.cssSelector("label[for=emailUpdates]")).click();
		//// buton continue
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(5000);
		////// Packing
		// Grouped on pallets or in containers
		driver.findElement(By.xpath("//*[@id=\"app-radio-group-3\"]/div[2]/div/div/span")).click();
		// Quantity
		// Number of pallets or containers
		numberOfItems = driver.findElement(By.id("packingNumberOfPallets"));
		numberOfItems.sendKeys("3");
		Thread.sleep(500);
		// shiping services
		packingShippingPriority = driver.findElement(By.cssSelector(
				"#main-content > div > div > app-root > div > app-packing > div > div.packing-container.medium-8.large-7.columns > form > div.item-container.shipping-services-container.large-11 > div:nth-child(2) > div:nth-child(1) > label"));
		packingShippingPriority.click();
		// Submit page
		driver.findElement(By.id("packingSubmit")).click();
		Thread.sleep(5000);

		//// Data and time
		driver.findElement(By.className("btn-calendar")).click();
		month = driver.findElement(By.className("ngb-dp-month"));
		daysList = driver.findElements(By.xpath("//*[@class='btn-light']"));
		daysArary = daysList.toArray();
		WebElement day = ((WebElement) daysArary[randomDay]);
		helper.addBoarder(driver, day);
		day.click();
		Thread.sleep(2000);

		/// starting time
		driver.findElement(By.id("datetimePickupTimeDropdown")).click();
		List<WebElement> staringTimeList = driver.findElements(By.cssSelector("li[role=option]"));
		Object[] staringTimeArary = staringTimeList.toArray();
		((WebElement) staringTimeArary[randomTime]).click();
		Thread.sleep(1000);
		errorMsg = helper.FindElementSafe(driver, By.className("alert-message-container"));
		Assert.assertNotEquals(null, errorMsg);

	}

	@AfterClass
	public static void closeBrowser() throws Exception {
		helper.takeScreenshot(driver, "ExistingPickupWithinOneHour");
		// driver.quit();
	}
}