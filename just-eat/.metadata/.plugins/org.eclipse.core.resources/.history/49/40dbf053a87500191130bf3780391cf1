package testsParcelPickup;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.Random;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import main.java.Helper;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import java.util.concurrent.ThreadLocalRandom;


public class ScheduledPickupPost {
	private static Helper helper;
	int randomNum = ThreadLocalRandom.current().nextInt(1000, 10000);
	static String customerNum = "0007023194";
	static String id;
	LocalDate randomDate;
	
	@BeforeClass
	public static void setUp() throws Exception {
		helper = Helper.getInstance();
		System.out.println("Starting test " + new Object() {}.getClass().getEnclosingMethod().getName());
	}
	

	
	
	@Test
	public void pickupPost() throws IOException, SQLException  {	

		String postalCode=postalCodeGenerate();		
		randomDate = helper.getRandomDate();
		String url =helper.getProperty("ppstaging")+"/purs/"+customerNum+"/pickuprequest/scheduled";
        OkHttpClient client = new OkHttpClient();
        String json = "{\n" + 
        		"  \"contactInfo\": {\n" + 
        		"    \"contactNm\": \"jelena sch\",\n" + 
        		"    \"email\": \"jel.doe@email.com\",\n" + 
        		"    \"lang\": \"e\",\n" + 
        		"    \"phone\": \"613-123-4567\",\n" + 
        		"    \"phoneExt\": \"123\",\n" + 
        		"    \"receiveEmailUpdate\": false\n" + 
        		"  },\n" + 
        		"  \"createBy\": \"987654321\",\n" + 
        		"  \"itemsCharacteristics\": {\n" + 
        		"    \"estimatedDepth\": 25,\n" + 
        		"    \"estimatedDimension\": \"Estimated dimension\",\n" + 
        		"    \"estimatedHeight\": 25,\n" + 
        		"    \"estimatedWeight\": 3.2,\n" + 
        		"    \"estimatedWidth\": 25,\n" + 
        		"    \"heavyItems\": true,\n" + 
        		"    \"iilpFlag\": false,\n" + 
        		"    \"otherFlag\": false,\n" + 
        		"    \"priorityItems\": true,\n" + 
        		"    \"returnItems\": true,\n" + 
        		"    \"unitWeightType\": \"kg\",\n" + 
        		"    \"worldwideItems\": true\n" + 
        		"  },\n" + 
        		"  \"lang\": \"E\",\n" + 
        		"  \"locationDetail\": {\n" + 
        		"    \"5TonTruckRequired\": true,\n" + 
        		"    \"loadingDockExist\": true,\n" + 
        		"    \"pickupInstruction\": \"Front door\"\n" + 
        		"  },\n" + 
        		"  \"pickupAddress\": {\n" + 
        		"    \"addrLn1\": \"365 Mississ Road\",\n" + 
        		"    \"alternateAddr\": false,\n" + 
        		"    \"city\": \"Mississauga\",\n" + 
        		"    \"companyNm\": \"Innovapost Inc.\",\n" + 
        		"    \"countryCd\": \"CA\",\n" + 
        		"    \"postalCode\": \""+postalCode+"\",\n" + 
        		"    \"province\": \"ON\"\n" + 
        		"  },\n" + 
        		"  \"pickupVolume\": \"5 pallets\",\n" + 
        		"  \"remark\": \"call me before you come\",\n" + 
        		"  \"scheduledPickupTimes\": [\n" + 
        		"    {\n" + 
        		"      \"closingTime\": \"18:00\",\n" + 
        		"      \"preferredTime\": \"13:00\",\n" + 
        		"      \"scheduledDay\": \"MONDAY\"\n" + 
        		"    },\n" + 
        		"    {\n" + 
        		"      \"closingTime\": \"18:00\",\n" + 
        		"      \"preferredTime\": \"13:00\",\n" + 
        		"      \"scheduledDay\": \"Friday\"\n" + 
        		"    },\n" +         		
        		"    {\n" + 
        		"      \"closingTime\": \"18:00\",\n" + 
        		"      \"preferredTime\": \"13:00\",\n" + 
        		"      \"scheduledDay\": \"Sunday\"\n" + 
        		"    }\n" +  
        		
        		"  ],\n" + 
        		"  \"updateBy\": \"987654321\"\n" + 
        		"}";
        RequestBody body = RequestBody.create(
        	      MediaType.parse("application/json; charset=utf-8"), json);
        Request request = new Request.Builder()
          .url(url)
          .post(body)
          .addHeader("Content-Type", "application/vnd.cpc.purs-v1+json")
          .addHeader("Accept", "application/vnd.cpc.purs-v1+json")
          .addHeader("Cache-Control", "no-cache")
          .build();
        Response response = client.newCall(request).execute();
    	int responseCode =  response.code(); 
    	String responseBody =  response.body().string();
    	System.out.println(json);
    	System.out.println(responseBody);
    	Assert.assertEquals("Response Code",200, responseCode); 
	    Assert.assertNotEquals("Response body", "", responseBody);	
	    
        ////extract id from response body
        String[] tokens = responseBody.split("\",\"");        
        id = tokens[0];
        System.out.println(id);
        tokens = id.split("\":\"");
        id = tokens[1];
        System.out.println(id);
	    
	    
	    
		Connection connection = null;
		connection = helper.connetToPURSEdb();	    
	    Statement stmt = null;
        stmt = connection.createStatement();
        //////pickup on demand
	    String query1 = "Select * from request_schedule WHERE request_key ="+ id;
	    stmt = null;
        stmt = connection.createStatement();
        ResultSet rs1 = stmt.executeQuery(query1);
        String startDate = randomDate+" 00:00:00.0";
        while (rs1.next()) {
        	
            String SCHEDULE_PICKUP_START_DATE = rs1.getString("SCHEDULE_PICKUP_START_DATE").toString();
           // Assert.assertEquals("SCHEDULE_PICKUP_START_DATE",startDate, SCHEDULE_PICKUP_START_DATE); 

        }
        //////pickup item
	    query1 = "Select * from pickup_item WHERE request_key ="+ id;
	    stmt = null;
        stmt = connection.createStatement();
        rs1 = stmt.executeQuery(query1);
        
        while (rs1.next()) {
            int pickup_item_id = rs1.getInt("PICKUP_ITEM_KEY");
            Assert.assertNotEquals("pickup_item_id",0, pickup_item_id); 
        }   
        
        /////REQUEST_STATUS
	    query1 = "Select * from REQUEST_STATUS WHERE request_key ="+ id;
	    stmt = null;
        stmt = connection.createStatement();
        rs1 = stmt.executeQuery(query1);
        
        while (rs1.next()) {
            int request_status = rs1.getInt("REQUEST_STATUS_KEY");
            Assert.assertNotEquals("pickup_item_id",0, request_status); 
        }   
        
        ///// PICKUP_PREFERENCE
	    query1 = "SELECT  MAX(PICKUP_PREFERENCE_KEY) AS a FROM PICKUP_PREFERENCE";
	    stmt = null;
        stmt = connection.createStatement();
        rs1 = stmt.executeQuery(query1);
        
        while (rs1.next()) {
            int request_status = rs1.getInt("a");
            Assert.assertNotEquals("pickup_item_id",0, request_status); 
        }         
       
        //////cancel end primary address flag 
        
        
		 connection = null;
		connection = helper.connetToPURSEdb();


		String query = "select pickup_request.request_key , request_on_demand.REQUEST_ON_DEMAND_KEY from pickup_request \n" + 
				"INNER JOIN request_status ON pickup_request.REQUEST_KEY = request_status.REQUEST_KEY\n" + 
				"inner join request_on_demand on pickup_request.REQUEST_KEY= request_on_demand.REQUEST_KEY\n" + 
				"where REQUEST_STATUS_TYPE_KEY=2 and pickup_request.REQUEST_TYPE_KEY=2 and request_on_demand.PICKUP_DATE > '2019-04-24' order BY request_key";
		 stmt = null;
		stmt = connection.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		int id = 0;
		int idClose= 0;

			id = rs.getInt("request_key");
			idClose = rs.getInt("REQUEST_ON_DEMAND_KEY");
		
		System.out.println("id is " + idClose);
        
        
        
		// url = helper.getProperty("ppstaging") + "/purs/" + customerNum + "/pickuprequest/" + id;
		 url = helper.getProperty("ppstaging") + "/purs/"+customerNum +"/pickuprequest/"+id;
		 client = new OkHttpClient();
		 json = "{\n" + 
		 		"  \"authorizedBy\": \"7654321\",\n" + 
		 		"  \"updatedBy\": \"1234567\"\n" + 
		 		"}";
		 body = RequestBody.create(MediaType.parse("application/json; charset=utf-8"), json);
		 request = new Request.Builder()

				.url(url).delete(body).addHeader("Content-Type", "application/vnd.cpc.purs-v1+json")
				.addHeader("Accept", "application/vnd.cpc.purs-v1+json").addHeader("Cache-Control", "no-cache")
				.addHeader("Postman-Token", "e546a6d8-4931-4264-8c51-a5decea7ef2a").build();

		 response = client.newCall(request).execute();
		 responseCode = response.code();

		 responseBody = response.body().string();
		System.out.println("Response body is " + responseBody);
		Assert.assertEquals("Response Code", 200, responseCode);
        
      	
	}
	
	
	
	private String postalCodeGenerate() throws IOException
	{
		
		
		Random ran = new Random();
		int x1 = ran.nextInt(10);
		int x2 = ran.nextInt(10);
		int x3 = ran.nextInt(8);

		String postalCode = "A"+x1+"A"+x2+"A"+x3;
		System.out.println(postalCode);
		String url =helper.getProperty("ppstaging")+"/purs/pickup/acd";  
        OkHttpClient client = new OkHttpClient();
        String json = "[\n" + 
        		"{\n" + 
        		"\"availException\": 0,\n" + 
        		"\"custNeedHolidayAuth\": true,\n" + 
        		"\"custNeedSatAuth\": true,\n" + 
        		"\"custNeedSunAuth\": true,\n" + 
        		"\"effectiveDate\": \"2019-01-01\",\n" + 
        		"\"endDate\": \"2019-12-31\",\n" + 
        		"\"heavy\":\n" + 
        		"\n" + 
        		"{ \"cutoffHoliday\": \"17:00\", \"cutoffSat\": \"17:00\", \"cutoffSun\": \"17:00\", \"cutoffWeekday\": \"17:00\", \"daysInAdvHoliday\": 1, \"daysInAdvSat\": 1, \"daysInAdvSun\": 1, \"daysInAdvWeekday\": 1 }\n" + 
        		",\n" + 
        		"\"other\":\n" + 
        		"\n" + 
        		"{ \"cutoffHoliday\": \"17:00\", \"cutoffSat\": \"17:00\", \"cutoffSun\": \"17:00\", \"cutoffWeekday\": \"17:00\" }\n" + 
        		",\n" + 
        		"\"postal\": \""+postalCode+"\",\n" + 
        		"\"printers\":\n" + 
        		"\n" + 
        		"{ \"printer\": \"ZZ001\", \"printer2\": \"ZZ002\", \"printer2Holiday\": \"ZZ008\", \"printer2Sat\": \"ZZ004\", \"printer2Sun\": \"ZZ006\", \"printerHoliday\": \"ZZ007\", \"printerSat\": \"ZZ003\", \"printerSun\": \"ZZ005\" }\n" + 
        		",\n" + 
        		"\"pww\":\n" + 
        		"\n" + 
        		"{ \"cutoffHoliday\": \"17:00\", \"cutoffSat\": \"17:00\", \"cutoffSun\": \"17:00\", \"cutoffWeekday\": \"17:00\" }\n" + 
        		",\n" + 
        		"\"regular\":\n" + 
        		"\n" + 
        		"{ \"cutoffHoliday\": \"17:00\", \"cutoffReq\": \"17:00\", \"cutoffReqHoliday\": \"17:00\", \"cutoffReqSat\": \"17:00\", \"cutoffReqSun\": \"17:00\", \"cutoffSat\": \"17:00\", \"cutoffSun\": \"17:00\", \"cutoffSys\": \"17:00\", \"cutoffSysHoliday\": \"17:00\", \"cutoffSysSat\": \"17:00\", \"cutoffSysSun\": \"17:00\", \"cutoffWeekday\": \"17:00\", \"daysInAdvHoliday\": 1, \"daysInAdvSat\": 1, \"daysInAdvSun\": 1, \"daysInAdvWeekday\": 1 }\n" + 
        		",\n" + 
        		"\"services\":\n" + 
        		"\n" + 
        		"{ \"serviceSat\": 3, \"serviceSun\": 3, \"serviceWeekday\": 3 }\n" + 
        		",\n" + 
        		"\"ton5\":\n" + 
        		"\n" + 
        		"{ \"cutoffHoliday\": \"17:00\", \"cutoffSat\": \"17:00\", \"cutoffSun\": \"17:00\", \"cutoffWeekday\": \"17:00\", \"daysInAdvHoliday\": 1, \"daysInAdvSat\": 1, \"daysInAdvSun\": 1, \"daysInAdvWeekday\": 1 }\n" + 
        		"}\n" + 
        		"]";
        RequestBody body = RequestBody.create(
        	      MediaType.parse("application/json; charset=utf-8"), json);
        Request request = new Request.Builder()
          .url(url)
          .post(body)
          .addHeader("Content-Type", "application/vnd.cpc.purs-v1+json")
          .addHeader("Accept", "application/vnd.cpc.purs-v1+json")
          .addHeader("Cache-Control", "no-cache")
          .build();
        Response response = client.newCall(request).execute();
    	int responseCode =  response.code();
    	Assert.assertEquals("Response Code",200, responseCode);  
    	String responseBody =  response.body().string(); 
	    Assert.assertNotEquals("Response body", "", responseBody);	 	    
	    System.out.println(responseBody);
		
		
		
		return postalCode;
	}
	
}
