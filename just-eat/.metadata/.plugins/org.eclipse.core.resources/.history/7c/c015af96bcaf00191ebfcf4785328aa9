package testsParcelPickupFrontend;


import org.openqa.selenium.support.ui.WebDriverWait;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;

import main.java.*;

import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;


@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class SpinnerOnDemand {
	private static WebDriver driver;
	private static Helper helper;
	WebDriverWait wait = new WebDriverWait(driver, 60);

	@BeforeClass
	public static void setUp() throws Exception {
		helper = Helper.getInstance();
		driver = Helper.getDriver();
		driver.manage().window().setSize(new Dimension(1360, 1000));
		System.out.println("Starting test " + new Object() {}.getClass().getEnclosingMethod().getName());
		helper.pickupOnDemandDelete("0007231196");
		helper.pickupScheduledDelete("0007231196");
		driver.navigate().to(helper.getProperty("stagingHome"));
		String user = "erpUser";
		String password = "erpPassword";		
		helper.signInCP(driver, user, password);

	}

	@Test
	public void onDemand() throws Exception {
		String testName= new Object() {}.getClass().getEnclosingMethod().getName();
		System.out.println("Starting test " + testName);
		driver.navigate().to(helper.getProperty("parcelPickup"));
		helper.closeCookieBanner(driver);
		Thread.sleep(2000);	
		///click on alternate address 
		driver.findElement(By.xpath("//div[text()='Use an alternate address']")).click();
		
		WebElement addressInput = driver.findElement(By.className("addressCompleteInput"));
		Thread.sleep(1000);
		helper.addBoarder(driver, addressInput);
		addressInput.sendKeys("A1A1A1");
 		Thread.sleep(3000);
		addressInput.sendKeys(Keys.ENTER);
		Thread.sleep(3000);
		addressInput.sendKeys(Keys.ENTER);
		Thread.sleep(3000);
		////Instructions
		WebElement instruction = driver.findElement(By.tagName("app-instructions"));
		helper.takeScreenshot(driver,new Object() {
		}.getClass().getEnclosingMethod().getName());
		instruction.findElement(By.className("arrow-down")).click();
		Thread.sleep(1000);
		try {
			WebElement container = instruction.findElement(By.className("visible-menu"));
		}
		catch (Exception e) {
			instruction.findElement(By.className("arrow-down")).click();
		}
		WebElement container = instruction.findElement(By.className("visible-menu"));
		WebElement ulist = container.findElement(By.tagName("ul"));
		List <WebElement> dragAndDropList = ulist.findElements(By.tagName("li"));       
	    Object[] dragAndDropArary = dragAndDropList.toArray(); 
	    ((WebElement) dragAndDropArary[3]).click();
		driver.findElement(By.cssSelector("label[for=emailUpdates]")).click();

		
		
		////buton continue 
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(3000);
		//////Packing
		//Quantity and weight >9999
		WebElement numberOfItems = driver.findElement(By.id("packingNumberOfItems"));
		numberOfItems.sendKeys("10000");
		WebElement averageWeight = driver.findElement(By.id("packingWeightOfItems"));
		averageWeight.sendKeys("50");
		WebElement packingOverWeight = driver.findElement(By.cssSelector("label[for=packingOverWeight]"));
		packingOverWeight.click();
		Thread.sleep(1000);
		//shiping services 
		//Submit page
		driver.findElement(By.id("packingSubmit")).click();	
		WebElement error = helper.FindElementSafe(driver, By.className("invalid-feedback"));
		Assert.assertNotEquals(null, error);
		//Quantity and weight =9999
		numberOfItems.clear();
		numberOfItems.sendKeys("9999");
		averageWeight.clear();
		averageWeight.sendKeys("30");
		packingOverWeight.click();
		Thread.sleep(1000);
		WebElement packingShippingPriority = driver.findElement(By.xpath("//*[@id=\"main-content\"]/div/div/app-root/div/app-packing/div/div[1]/form/div[3]/div[2]/div[4]/label"));
		packingShippingPriority.click();
		error = helper.FindElementSafe(driver, By.className("invalid-feedback"));
		Assert.assertEquals(null, error);
		//Quantity and weight =999
		numberOfItems.clear();
		numberOfItems.sendKeys("999");
		averageWeight.clear();
		averageWeight.sendKeys("25");
		Thread.sleep(1000);		
		error = helper.FindElementSafe(driver, By.className("invalid-feedback"));
		Assert.assertEquals(null, error);
		//shiping services 

		//Submit page
		driver.findElement(By.id("packingSubmit")).click();	
		////date and time
		///Calendar
		Thread.sleep(5000);
		WebElement month;
		WebElement errorMsg = packingOverWeight;
		int randomDay = 0;
		int randomTime = 0;
		List<WebElement> daysList;
		Object[] daysArary;
		Thread.sleep(5000);
		WebElement reviewSubmit = null;
		
		while (errorMsg != null) {
			driver.findElement(By.className("btn-calendar")).click();
				 month = driver.findElement(By.className("ngb-dp-month"));
				helper.addBoarder(driver, month);		
				daysList = driver.findElements(By.xpath("//*[@class='btn-light']"));
				daysArary = daysList.toArray(); 
				randomDay = ThreadLocalRandom.current().nextInt(0,daysArary.length);
				
				
				
				
				WebElement day = ((WebElement) daysArary[randomDay]);
			    helper.addBoarder(driver, day);
			    day.click();
			    Thread.sleep(5000);
			    ///starting time
			    driver.findElement(By.id("datetimePickupTimeDropdown")).click();
			    Thread.sleep(2000);
				List <WebElement> staringTimeList = driver.findElements(By.cssSelector("li[role=option]"));
				Object[] staringTimeArary = staringTimeList.toArray(); 
				randomTime = ThreadLocalRandom.current().nextInt(1,staringTimeArary.length);
				((WebElement) staringTimeArary[randomTime]).click();
				Thread.sleep(3000);
				errorMsg = helper.FindElementSafe(driver, By.className("alert-message-container"));
		}
				///Business closing time
			    driver.findElement(By.id("datetimeClosingTimeDropdown")).click();
				List <WebElement> businessTimeList = driver.findElements(By.cssSelector("li[role=option]"));
				Object[] businessTimeArary = businessTimeList.toArray(); 
				int randomBussinesTime = ThreadLocalRandom.current().nextInt(1,businessTimeArary.length);
				((WebElement) businessTimeArary[randomBussinesTime]).click();
				Thread.sleep(1000); 
				////submit page
				driver.findElement(By.id("datetimeSubmit")).click();
				Thread.sleep(5000);
				
				////payment
				driver.switchTo().defaultContent();
				driver.switchTo().frame(driver.findElement(By.id("cpwa__frame")));
				Thread.sleep(1000);
				driver.findElement(By.xpath("//*[@id=\"placeOrder\"]/p/input")).click();
				driver.switchTo().defaultContent();
				//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("img[@alt='spinner']")));
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("paymentBlockUIContainer")));
				WebElement spinner = helper.FindElementSafe(driver, By.id("paymentBlockUIContainer"));
				Assert.assertNotEquals(null, spinner);

				
				
	}

	
	
 

	@AfterClass
	public static void closeBrowser() throws Exception {
		helper.takeScreenshot(driver, "spinner on demand");		
		driver.quit();
	}
}