package com.parcelpickupFrontEnd;



import java.io.IOException;
import java.util.List;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.annotations.*;

import com.sharedlibrary.Components;
import com.sharedlibrary.Helper;

import io.netty.util.internal.ThreadLocalRandom;

import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;



@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class AdminToolCreateScheduledRequest {
	private static WebDriver driver;
	private static Helper helper;



	@BeforeClass
	@Parameters({ "browser" })
	public  void setUp(@Optional("chrome") String browser) throws Exception {
		helper = Helper.getInstance();
		driver = Helper.getDriver(browser);
		helper.pickupScheduledDelete(helper.getProperty("erpCustomerNumber"));
		driver.manage().window().setSize(new Dimension(1360, 1000));
		System.out.println("Starting test " + new Object() {}.getClass().getEnclosingMethod().getName());

	}
	@Test

	public void CreateScheduledRequest() throws InterruptedException, IOException {
		///logitn to admin tool
		
		driver.navigate().to(helper.getProperty("admintool"));
		String user = helper.getProperty("pupadminUser");
		String password = helper.getProperty("pupadminPassword");	
		driver.findElement(By.id("logonuidfield")).sendKeys(user);
		driver.findElement(By.id("logonpassfield")).sendKeys(password);
		driver.findElement(By.xpath("//*[@id=\"logonForm\"]/table/tbody/tr[8]/td[1]/input[1]")).click(); 
		driver.findElement(By.id("navNodeAnchor_1_2")).click();
		driver.findElement(By.id("navNodeAnchor_2_2")).click();
		Helper.windowsSwitcher(driver);
		Thread.sleep(5000);
		driver.findElement(By.xpath("//*[@id=\"customerNum\"]")).sendKeys(helper.getProperty("erpCustomerNumber"));
		driver.findElement(By.id("searchSubmit")).click();
		Thread.sleep(5000);	
		String url = driver.getCurrentUrl();
		 Boolean containsHttp =  url.toLowerCase().contains("orderhistory".toLowerCase());
		 Assert.assertEquals(true, containsHttp);
		 ////back to search fro customer 
		WebElement backToSearch = helper.FindElementSafe(driver, By.id("backToSearchBtn"));
		Assert.assertNotEquals(null, backToSearch);
		driver.findElement(By.id("createNewPickup")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//*[contains(text(),'Recurring (scheduled)')]")).click();
		Components.alternateAddress(driver, "L4X2R2");
		Components.instructions(driver);
		//// buton continue
        JavascriptExecutor javascriptExecutor = (JavascriptExecutor) driver;
        String contactEmail = (String) javascriptExecutor.executeScript("return document.getElementById('contactEmail').value");
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(2000);
		 backToSearch = helper.FindElementSafe(driver, By.id("backToSearchBtn"));
		Assert.assertNotEquals(null, backToSearch);
		//////Packing
		Components.packing(driver);
		//shiping services 
		driver.findElement(By.id("packingSubmit")).click();	
		Thread.sleep(4000);
		////date and time
		///Calendar
		///alert message is pesented
		WebElement alertMessage= helper.FindElementSafe(driver, By.className("alert-message-container"));
		Assert.assertNotEquals(null, alertMessage);
		////check is first time 6:00 am
		WebElement datetimePickupTimeDropdown = driver.findElement(By.xpath("//*[@id=\"datetimePickupTimeDropdown-0\"]/div"));
		datetimePickupTimeDropdown.click();
		WebElement ulist = datetimePickupTimeDropdown.findElement(By.tagName("ul"));
		List<WebElement> dragAndDropList = ulist.findElements(By.tagName("li"));
		Object[] dragAndDropArary = dragAndDropList.toArray();
		String time_zero = ((WebElement) dragAndDropArary[0]).getText();
		Assert.assertEquals("6:00 am", time_zero);
		//////
		Components.scheduledPickuptime(driver);			
		driver.findElement(By.id("datetimeSubmit")).click();
		 WebElement errorMsg = helper.FindElementSafe(driver,By.className("invalid-feedback"));
		Assert.assertNotEquals(null, errorMsg);
		driver.findElement(By.className("btn-calendar")).click();
		WebElement month = driver.findElement(By.className("ngb-dp-month"));
		List<WebElement> daysList = driver.findElements(By.xpath("//*[@class='btn-light']"));
		Object[] daysArary = daysList.toArray();
		int randomDay = ThreadLocalRandom.current().nextInt(0, daysArary.length);
		WebElement day = ((WebElement) daysArary[randomDay]);
		day.click();
		Thread.sleep(5000);		
		driver.findElement(By.id("datetimeSubmit")).click();
		Thread.sleep(2000);
		backToSearch = helper.FindElementSafe(driver, By.id("backToSearchBtn"));
		Assert.assertNotEquals(null, backToSearch);
	}
		
	@Test	
	public  void summaryPanel() throws Exception 
		{
			Thread.sleep(5000); 
			String msg = driver.findElement(By.className("review-container")).findElement(By.tagName("span")).getText();
			Assert.assertEquals("Please review your pickup details and make any changes before submitting your request. Payment will be charged on the day of pickup.", msg);
			WebElement dateSummary = driver.findElement(By.tagName("app-datetime-summary"));
			dateSummary.findElement(By.xpath("/div/div/div[1]"));

		}
	@Test
		public  void zSubmit() throws Exception 
		{
		driver.findElement(By.id("reviewSubmit")).click();
		Thread.sleep(10000);
		driver.switchTo().defaultContent();
		Thread.sleep(1000);
		String confirmation = driver.findElement(By.className("pickup-confirmation-number")).getText();
		String[] parts = confirmation.split(": ");
		String id = parts[1]; // 004
		
		///go to details
		driver.navigate().to("http://ows-arz-sha-stg-02.cpggpc.ca:5009/pupadmin/en/orderhistory-portal");
		driver.findElement(By.xpath("//*[@id=\"customerNum\"]")).sendKeys(helper.getProperty("erpCustomerNumber"));
		driver.findElement(By.id("searchSubmit")).click();
		// app-input-1
		Thread.sleep(3000);
		WebElement buttonleft = helper.FindElementSafe(driver, By.className("buttonleft"));
		buttonleft.findElement(By.xpath(
				"//*[@id=\"main-content\"]/div/div/app-root/div/app-order-history/div/app-calendar-view/div[1]/history-view-switcher/div/div[1]/div"))
				.click(); /// click on the list button
		///// click on request from list table-striped
		WebElement listveiw = driver.findElement(By.className("mytable"));
		listveiw.findElement(By.partialLinkText(id)).click();///// add id
			///check micro-rebook is presented 
		Thread.sleep(2000);
		 WebElement rebook = helper.FindElementSafe(driver, By.className("micro-rebook"));
		Assert.assertNotEquals(null, rebook);
		////start and and date are presented start-end-label
		 WebElement startEndDate = helper.FindElementSafe(driver, By.className("start-end-date"));
		Assert.assertNotEquals(null, rebook);
		List<WebElement> startEndLabelList = startEndDate.findElements(By.className("start-end-label"));
		Object[] startEndLabelArary = startEndLabelList.toArray();
		WebElement startEnd1 = ((WebElement) startEndLabelArary[0]);
		String startEnd1Text1 = startEnd1.getText();
		WebElement startEnd2 = ((WebElement) startEndLabelArary[1]);
		String startEnd1Text2 = startEnd2.getText();
		Assert.assertNotEquals("", startEnd1Text1);
		Assert.assertNotEquals("", startEnd1Text2);
	}
	

	
	
	

	@AfterClass
	public static void quitBrowser() throws Exception {
		helper.takeScreenshot(driver, "Messages");
		driver.quit();
	}
}