package com.parcelpickupFrontEnd;



import java.io.IOException;
import java.util.List;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.*;

import com.sharedlibrary.Components;
import com.sharedlibrary.Helper;

import io.netty.util.internal.ThreadLocalRandom;

import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;



@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class AdminToolNoEditMorningRequestTest {
	private static WebDriver driver;
	private static Helper helper;



	@BeforeClass
	@Parameters({ "browser" })
	public  void setUp(@Optional("chrome") String browser) throws Exception {
		helper = Helper.getInstance();
		driver = Helper.getDriver(browser);
		driver.manage().window().setSize(new Dimension(1360, 1000));
		System.out.println("Starting test " + new Object() {}.getClass().getEnclosingMethod().getName());
		helper.pickupOnDemandDelete(helper.getProperty("erpCustomerNumber"));

	}
	@Test

	public void CreateOnDemand() throws InterruptedException, IOException {
		///logitn to admin tool
		driver.navigate().to(helper.getProperty("admintool"));
		String adminUser = helper.getProperty("pupadminUser");
		String adminPassword = helper.getProperty("pupadminPassword");	
		driver.findElement(By.id("logonuidfield")).sendKeys(adminUser);
		driver.findElement(By.id("logonpassfield")).sendKeys(adminPassword);
		driver.findElement(By.xpath("//*[@id=\"logonForm\"]/table/tbody/tr[8]/td[1]/input[1]")).click(); 
		driver.findElement(By.id("navNodeAnchor_1_2")).click();
		driver.findElement(By.id("navNodeAnchor_2_2")).click();
		Helper.windowsSwitcher(driver);
		Thread.sleep(5000);
		helper.closeCookieBanner(driver);
		driver.findElement(By.xpath("//*[@id=\"customerNum\"]")).sendKeys(helper.getProperty("erpCustomerNumber"));
		driver.findElement(By.id("searchSubmit")).click();
		Thread.sleep(4000);
		String url = driver.getCurrentUrl();
		 Boolean containsHttp =  url.toLowerCase().contains("orderhistory".toLowerCase());
		 Assert.assertEquals(true, containsHttp);
		 ////back to search fro customer 
		WebElement backToSearch = helper.FindElementSafe(driver, By.id("backToSearchBtn"));
		Assert.assertNotEquals(null, backToSearch);
		helper.closeCookieBanner(driver);
		driver.findElement(By.id("createNewPickup")).click();
		Thread.sleep(2000);		
		//Components.alternateAddress(driver, "K2K3N5");
		Components.instructions(driver);
		//// buton continue
        JavascriptExecutor javascriptExecutor = (JavascriptExecutor) driver;
        String contactEmail = (String) javascriptExecutor.executeScript("return document.getElementById('contactEmail').value");
        //Components.requestor(driver);
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(2000);
		 backToSearch = helper.FindElementSafe(driver, By.id("backToSearchBtn"));
		Assert.assertNotEquals(null, backToSearch);
	//////Packing
		//////Packing
		//Quantity and weight >9999
		Components.packing(driver);
		//shiping services 
		Components.shipingServicesNoPayment(driver);
		//Submit page
		driver.findElement(By.id("packingSubmit")).click();	
		////date and time
		///Calendar
		Thread.sleep(5000);
		Components.onDemandPickuptime(driver);	
		////check is first time 6:00 am
		driver.findElement(By.id("datetimePickupTimeDropdown")).click();
		Thread.sleep(2000);
		List<WebElement> staringTimeList = driver.findElements(By.cssSelector("li[role=option]"));
		Object[] staringTimeArary = staringTimeList.toArray();
		String time_zero = ((WebElement) staringTimeArary[1]).getText();
		Assert.assertEquals("6:00 am", time_zero);
		((WebElement) staringTimeArary[1]).click();
		driver.findElement(By.id("datetimeClosingTimeDropdown")).click();
		List<WebElement> businessTimeList = driver.findElements(By.cssSelector("li[role=option]"));
		Object[] businessTimeArary = businessTimeList.toArray();
		int randomBussinesTime = ThreadLocalRandom.current().nextInt(1, businessTimeArary.length);
		((WebElement) businessTimeArary[randomBussinesTime]).click();
		Thread.sleep(1000);
		//////
		driver.findElement(By.id("datetimeSubmit")).click();
		Thread.sleep(5000);
		backToSearch = helper.FindElementSafe(driver, By.id("backToSearchBtn"));
		Assert.assertNotEquals(null, backToSearch);
		driver.findElement(By.id("reviewSubmit")).click();
		
		
		WebDriverWait wait = new WebDriverWait(driver, 60);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("pickup-confirmation-number")));
		String confirmation = driver.findElement(By.className("pickup-confirmation-number")).getText();
		String[] parts = confirmation.split(": ");
		String id = parts[1]; 
		
		/////try to edit from purs app		
		driver.navigate().to(helper.getProperty("stagingHome"));
		String user = "erpUser";
		String password = "erpPassword";
		String testName = "Starting test " + new Object() {}.getClass().getEnclosingMethod().getName();
		helper.signInCP(driver, user, password, testName);
		driver.navigate().to("https://stg12.canadapost.ca/pup/en/orderhistory");
		Thread.sleep(2000);
		helper.closeCookieBanner(driver);
		WebElement buttonleft = helper.FindElementSafe(driver, By.className("buttonleft"));
		Assert.assertNotEquals(null, buttonleft);
		buttonleft.findElement(By.xpath("//*[@id=\"main-content\"]/div/div/app-root/div/app-order-history/div/app-calendar-view/div[1]/history-view-switcher/div/div[1]/div")).click(); /// click on the list button 
		WebElement listveiw = driver.findElement(By.className("mytable"));
		listveiw.findElement(By.partialLinkText(id)).click();
		WebElement edit = wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("micro-edit")));
		edit.click();
		Thread.sleep(2000);
		driver.findElement(By.id("viewBtn")).click(); ///modal-content
		WebElement msg=wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("modal-content")));
		String msgText = msg.getText();
		Assert.assertNotEquals("", msgText);
		
		
	}
	

	
	
	

	@AfterClass
	public static void quitBrowser() throws Exception {
		helper.takeScreenshot(driver, "AdminToolNoEditMornngRequestTest");
		driver.quit();
	}
}