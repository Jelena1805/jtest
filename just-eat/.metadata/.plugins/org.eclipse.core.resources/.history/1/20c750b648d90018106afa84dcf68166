package testsParcelPickup;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import main.java.Helper;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import java.util.concurrent.ThreadLocalRandom;


public class PickupDELETE {
	private static Helper helper;
	int randomNum = ThreadLocalRandom.current().nextInt(1000, 10000);
	String customerNum = "jelenaTestDD"+randomNum;
	
	@BeforeClass
	public static void setUp() throws Exception {
		helper = Helper.getInstance();
		System.out.println("Starting test " + new Object() {}.getClass().getEnclosingMethod().getName());
	}
	
	@Test
	public void pickupOndemandDelete() throws IOException, SQLException, InterruptedException  {	
		/////// post one to make sure deleting proper one ////////////////////////////////////////////
		String url =helper.getProperty("ppstaging")+"/purs/0007023210/pickuprequest";    
        OkHttpClient client = new OkHttpClient();
        String json = "{\n" + 
        		"  \"clientSourceAppKey\": \"1\",\n" + 
        		"  \"contactInfo\": {\n" + 
        		"    \"contactName\": \"John Doe\",\n" + 
        		"    \"contactPhone\": \"613-123-4567\",\n" + 
        		"    \"email\": \"john.doe@email.com\",\n" + 
        		"    \"lang\": \"e\",\n" + 
        		"    \"optOutEmailUpdatesFlag\": false,\n" + 
        		"    \"receiveEmailUpdatesFlag\": false,\n" + 
        		"    \"telephoneExt\": \"123\"\n" + 
        		"  },\n" + 
        		"  \"itemsCharacteristics\": {\n" + 
        		"    \"estimatedDepth\": \"25.0\",\n" + 
        		"    \"estimatedDimension\": \"Estimated dimension\",\n" + 
        		"    \"estimatedHeight\": \"25.0\",\n" + 
        		"    \"estimatedWeight\": \"3.2\",\n" + 
        		"    \"estimatedWidth\": \"25.0\",\n" + 
        		"    \"heavyItemFlag\": false,\n" + 
        		"    \"iilpflag\": true,\n" + 
        		"    \"priorityFlag\": true,\n" + 
        		"    \"pwwFlag\": false,\n" + 
        		"    \"returnsFlag\": true\n" + 
        		"  },\n" + 
        		"  \"locationDetails\": {\n" + 
        		"    \"fiveTonFlag\": false,\n" + 
        		"    \"loadingDockFlag\": true,\n" + 
        		"    \"pickupInstructions\": \"Call me when you are here\"\n" + 
        		"  },\n" + 
        		"  \"pickupLocation\": {\n" + 
        		"    \"alternateAddress\": {\n" + 
        		"      \"addrLn1\": \"string\",\n" + 
        		"      \"addrLn2\": \"string\",\n" + 
        		"      \"city\": \"Ottawa\",\n" + 
        		"      \"companyNm\": \"string\",\n" + 
        		"      \"postalCode\": \"K2K3K8\",\n" + 
        		"      \"province\": \"ON\"\n" + 
        		"    },\n" + 
        		"    \"businessAddr\": true\n" + 
        		"  },\n" + 
        		"  \"pickupTimes\": {\n" + 
        		"    \"onDemandPickupTime\": {\n" + 
        		"      \"closingTime\": \"18:00\",\n" + 
        		"      \"date\": \"2018-12-10\",\n" + 
        		"      \"preferredTime\": \"13:30\"\n" + 
        		"    }\n" + 
        		"  },\n" + 
        		"  \"pickupType\": \"OnDemand\",\n" + 
        		"  \"pickupVolume\": \"5\",\n" + 
        		"  \"remark\": \"Order created by Customer Support\",\n" + 
        		"  \"requesterCpcId\": \"987654321\"\n" + 
        		"}";
        RequestBody body = RequestBody.create(
        	      MediaType.parse("application/json; charset=utf-8"), json);
        Request request = new Request.Builder()
          .url(url)
          .post(body)
          .addHeader("Content-Type", "application/vnd.cpc.purs-v1+json")
          .addHeader("Accept", "application/vnd.cpc.purs-v1+json")
          .addHeader("Cache-Control", "no-cache")
          .build();
        Response response = client.newCall(request).execute();
        String responseBody =  response.body().string(); 
    	int responseCode =  response.code();
    	//Assert.assertEquals("Response Code",200, responseCode);  
		Thread.sleep(10000);
		
		////////////// end of post...............///////////
		Connection connection = null;
		connection = helper.connetToPURSEdb();	    
	    String query = "SELECT  MAX(request_key) AS a FROM (\n" + 
	    		"select pickup_request.request_key from pickup_request \n" + 
	    		"INNER JOIN request_status ON pickup_request.REQUEST_KEY = request_status.REQUEST_KEY\n" + 
	    		"where REQUEST_STATUS_TYPE_KEY=2 and pickup_request.REQUEST_TYPE_KEY=2\n" + 
	    		")";
	    Statement stmt = null;
        stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        int id=0;
        while(rs.next())
        {
        	 id = rs.getInt("a");
        }
        System.out.println("new id is "+id);
        //http://ows-arz-sha-stg-02.cpggpc.ca:5044/purs/0001037230/pickuprequest/1508
        url = helper.getProperty("ppstaging")+"/purs/0007023210/pickuprequest/"+id;
         client = new OkHttpClient();
         json = "{\n" + 
         		"  \"authorizedBy\": \"dsgsdga\",\n" + 
         		"  \"updatedBy\": \"dsgsdga\"\n" + 
         		"}";
         body = RequestBody.create(
      	      MediaType.parse("application/json; charset=utf-8"), json);
         request = new Request.Builder()

          .url(url)
          .delete(body)
          .addHeader("Content-Type", "application/vnd.cpc.purs-v1+json")
          .addHeader("Accept", "application/vnd.cpc.purs-v1+json")
          .addHeader("Cache-Control", "no-cache")
          .addHeader("Postman-Token", "e546a6d8-4931-4264-8c51-a5decea7ef2a")
          .build();

         response = client.newCall(request).execute();
    	 responseCode =  response.code();
    	 
    	 responseBody =  response.body().string(); 
    	 System.out.println("Response body is "+ responseBody);
	    Assert.assertNotEquals("Response body", "", responseBody);	
	    Assert.assertEquals("Response Code",200, responseCode); 
	    Thread.sleep(10000);
		connection = null;
		connection = helper.connetToPURSEdb();	    
	     query = "select * from request_status where request_key ="+ id;
	     stmt = null;
        stmt = connection.createStatement();
         rs = stmt.executeQuery(query);
        String requestid ="";
        String pickuprecordstatus ="";
        while (rs.next()) {
        	int request_status_type_key = rs.getInt("REQUEST_STATUS_TYPE_KEY"); 
        	Assert.assertEquals("Canceled status is 3", 3, request_status_type_key); 
                   
        }	}
        

	
}
