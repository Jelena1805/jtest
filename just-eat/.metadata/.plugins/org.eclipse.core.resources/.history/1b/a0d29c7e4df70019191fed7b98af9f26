package com.parcelpickupFrontEnd;



import java.util.List;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.annotations.*;
import org.testng.annotations.Test;
import org.testng.annotations.Parameters;
import org.testng.annotations.Optional;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

import com.sharedlibrary.Components;
import com.sharedlibrary.Helper;


@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class SchedueledCreatePickupTest {
	private static WebDriver driver;
	private static Helper helper;

	@BeforeClass
	@Parameters({ "browser" })
	public static void setUp(@Optional("chrome") String browser) throws Exception {
		helper = Helper.getInstance();
		driver = Helper.getDriver(browser);
		driver.manage().window().setSize(new Dimension(1360, 1000));
		System.out.println("Starting test " + new Object() {}.getClass().getEnclosingMethod().getName());
		driver.navigate().to(helper.getProperty("stagingHome"));
		String user = "erpUser";
		String password = "erpPassword";
		String customerNum = helper.getProperty("erpCustomerNumber");
		helper.pickupScheduledDelete(customerNum);
		String testName = "Starting test " + new Object() {}.getClass().getEnclosingMethod().getName();
		helper.signInCP(driver, user, password, testName);

	}

	@Test

	public void createScheduel() throws InterruptedException, java.text.ParseException {
		System.out.println("Starting test " + new Object() {
		}.getClass().getEnclosingMethod().getName());
		driver.navigate().to(helper.getProperty("parcelPickup"));
		helper.closeCookieBanner(driver);
		Thread.sleep(2000);
		driver.findElement(By.xpath("//*[contains(text(),'Recurring (scheduled)')]")).click();
		Components.alternateAddress(driver, "L4X2R2");
		//// Instructions
		Components.instructions(driver);
		//// buton continue
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(4000);
		//////Packing
		//Grouped on pallets or in containers
		Components.packing(driver);
		
		//Submit page
		driver.findElement(By.id("packingSubmit")).click();
		Thread.sleep(2000);
		////Data and time
		Components.scheduledPickuptime(driver);
	
		
		
		/////submit page
		driver.findElement(By.id("datetimeSubmit")).click();
		
	}
	
	@Test
	
	public  void summaryPanel() throws Exception 
	{
		Thread.sleep(5000); 
		String msg = driver.findElement(By.className("review-container")).findElement(By.tagName("span")).getText();
		Assert.assertEquals("Please review your pickup details and make any changes before submitting your request. Payment will be charged on the day of pickup.", msg);
		
	}
	
	@Test
	
	public  void submit() throws Exception 
	{
		WebElement appDatetimeSummary = driver.findElement(By.tagName("app-datetime-summary"));
		////title
		String title = appDatetimeSummary.findElement(By.tagName("h3")).getText();
		//Assert.assertEquals("Date and time", title);
		///ready for pickup 
		List<WebElement> timeLIst = appDatetimeSummary.findElements(By.className("summary-item"));
		Object[] timeLIstArary = timeLIst.toArray();
		WebElement readyForPickup = (WebElement) timeLIstArary[0];
		String readyForPickupText = readyForPickup.findElement(By.tagName("span")).getText();
		//Assert.assertEquals("Every Tue at 3:30 pm", readyForPickupText);
		readyForPickup = (WebElement) timeLIstArary[1];
		readyForPickupText = readyForPickup.findElement(By.tagName("span")).getText();


			//// payment
			driver.switchTo().defaultContent();
			driver.switchTo().frame(driver.findElement(By.id("cpwa__frame")));
			Thread.sleep(1000);
			//// add new credit card

			driver.findElement(By.xpath("//*[@id=\"placeOrder\"]/p/input")).click();
		

		Thread.sleep(10000);
		driver.switchTo().defaultContent();
		Thread.sleep(1000);
		String confirmation = driver.findElement(By.className("pickup-confirmation-number")).getText();
		String[] parts = confirmation.split(": ");
		String id = parts[1]; // 004
		///// Assert request is boocked

		WebElement boocked = helper.FindElementSafe(driver,
				By.xpath("//*[@id=\"main-content\"]/div/div/app-root/div/app-confirmation/div/div[1]/h2"));
		Assert.assertNotEquals("Order is booked", null, boocked);
		if (boocked != null) {
			String boockedText = boocked.getText();
			Assert.assertEquals("Your pickup is booked!", boockedText);
		}


		driver.navigate().to("https://stg12.canadapost.ca/pup/en/orderhistory");
		helper.closeCookieBanner(driver);
		WebElement createNew = helper.FindElementSafe(driver, By.className("create-new-pickup-button"));
		Assert.assertNotEquals(null, createNew);
		// app-input-1
		Thread.sleep(3000);
		WebElement buttonleft = helper.FindElementSafe(driver, By.className("buttonleft"));
		buttonleft.findElement(By.xpath(
				"//*[@id=\"main-content\"]/div/div/app-root/div/app-order-history/div/app-calendar-view/div[1]/history-view-switcher/div/div[1]/div"))
				.click(); /// click on the list button
		///// click on request from list table-striped
		WebElement listveiw = driver.findElement(By.className("mytable"));
		listveiw.findElement(By.partialLinkText(id)).click();///// add id
		Thread.sleep(3000);
		String status = driver.findElement(By.className("status")).getText();
		Assert.assertEquals("New", status);
		
	}

	
	@AfterClass
	public static void closeBrowser() throws Exception {
		helper.takeScreenshot(driver, "createScheduel");
		driver.quit();
	}
}