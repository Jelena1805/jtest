package com.parcelpickupFrontEnd;

import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.time.LocalDate;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.*;
import com.sharedlibrary.Components;
import com.sharedlibrary.Helper;

import java.util.List;

import java.util.concurrent.ThreadLocalRandom;

public class CloneOrderTest {
	private static Helper helper;
	int randomNum = ThreadLocalRandom.current().nextInt(1000, 10000);
	private static WebDriver driver;
	static LocalDate randomDate;

	@BeforeClass
	@Parameters({ "browser" })
	public static void setUp(@Optional("chrome") String browser) throws Exception {

		helper = Helper.getInstance();
		String customerNum = helper.getProperty("erpCustomerNumber");
		helper.pickupOnDemandDelete(customerNum);
		driver = Helper.getDriver(browser);
		driver.manage().window().setSize(new Dimension(1360, 1000));
		System.out.println("Starting test " + new Object() {
		}.getClass().getEnclosingMethod().getName());
		driver.navigate().to(helper.getProperty("stagingHome"));
		String user = "erpUser";
		String password = "erpPassword";
		String testName = "Starting test " + new Object() {}.getClass().getEnclosingMethod().getName();
		helper.signInCP(driver, user, password, testName);
		System.out.println("Starting test " + new Object() {
		}.getClass().getEnclosingMethod().getName());

	}

	@Test

	public void cloneOnDemand() throws IOException, SQLException, ParseException, InterruptedException {
		System.out.println("Starting test " + new Object() {
		}.getClass().getEnclosingMethod().getName());
		driver.navigate().to(helper.getProperty("parcelPickup"));
		helper.closeCookieBanner(driver);
		Components.alternateAddress(driver, "L4X2R");
		//// Instructions
		Components.instructions(driver);
		//// buton continue
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(4000);
		////// Packing
		Components.packing(driver);
		Components.shipingServicesNoPayment(driver);
		Thread.sleep(1000);
		// Submit packing page page
		driver.findElement(By.id("packingSubmit")).click();
		Thread.sleep(5000);
		///// OD calendar
		Components.onDemandPickuptime(driver);
		Thread.sleep(2000);
		driver.findElement(By.id("datetimeSubmit")).click();
		Thread.sleep(7000);
		Components.payment(driver, "account", "OD");
		driver.switchTo().defaultContent();
		WebDriverWait wait = new WebDriverWait(driver, 60);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("pickup-confirmation-number")));
		String confirmation = driver.findElement(By.className("pickup-confirmation-number")).getText();
		String[] parts = confirmation.split(": ");
		String id = parts[1]; // 004
		///// Assert request is boocked

		WebElement boocked = helper.FindElementSafe(driver,
				By.xpath("//*[@id=\"main-content\"]/div/div/app-root/div/app-confirmation/div/div[1]/h2"));
		Assert.assertNotEquals("Order is booked", null, boocked);
		if (boocked != null) {
			String boockedText = boocked.getText();
			Assert.assertEquals("Your pickup is booked!", boockedText);
		}
		/////////////CLONE ORDER
		driver.findElement(By.id("createRtnBtn")).click();
		helper.closeCookieBanner(driver);
		WebElement createNew = helper.FindElementSafe(driver, By.className("create-new-pickup-button"));
		Assert.assertNotEquals(null, createNew);
		// app-input-1
		Thread.sleep(3000);
		WebElement buttonleft = helper.FindElementSafe(driver, By.className("buttonleft"));
		buttonleft.findElement(By.xpath(
				"//*[@id=\"main-content\"]/div/div/app-root/div/app-order-history/div/app-calendar-view/div[1]/history-view-switcher/div/div[1]/div"))
				.click(); /// click on the list button
		///// click on request from list table-striped
		WebElement listveiw = driver.findElement(By.className("mytable"));
		listveiw.findElement(By.partialLinkText(id)).click();///// add id
		Thread.sleep(3000);
		driver.findElement(By.partialLinkText("Copy to new order")).click();
		Thread.sleep(3000);
		// Components.instructions(driver);
		///instructions page, must no be error msg-s
		 WebElement errorMsg = helper.FindElementSafe(driver, By.className("alert-message-container"));
		Assert.assertEquals("Is there error msg on location page",null,errorMsg );		
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(4000);
		driver.findElement(By.id("packingSubmit")).click();
		Thread.sleep(2000);
		
	///// OD calendar
			
			Components.onDemandPickuptime(driver);
			Thread.sleep(2000);
			driver.findElement(By.id("datetimeSubmit")).click();
			Thread.sleep(7000);
			Components.payment(driver, "account", "OD");
			Thread.sleep(10000);
			driver.switchTo().defaultContent();
			Thread.sleep(1000);
			 confirmation = driver.findElement(By.className("pickup-confirmation-number")).getText();
			 parts = confirmation.split(": ");
			 id = parts[1]; // 004
			///// Assert request is boocked

			 boocked = helper.FindElementSafe(driver,
					By.xpath("//*[@id=\"main-content\"]/div/div/app-root/div/app-confirmation/div/div[1]/h2"));
			Assert.assertNotEquals("Order is booked", null, boocked);
			if (boocked != null) {
				String boockedText = boocked.getText();
				Assert.assertEquals("Your pickup is booked!", boockedText);
			}
		
		
	}


	@AfterClass
	public static void quitBrowser() throws Exception {
		helper.takeScreenshot(driver, "cloneOnDemand");
		driver.quit();
	}
}
