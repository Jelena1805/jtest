package com.parcelpickupFrontEnd;


import java.lang.reflect.Method;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.*;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

import com.sharedlibrary.Components;
import com.sharedlibrary.Helper;



@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class AdminCrmCrateTest {
	private static WebDriver driver;
	private static Helper helper;
	//private static String contactEmail;

    @BeforeClass
    public void beforeClass(){
        //Ideal place to perform some setup which is shared among all tests.
        //E.g. Initializing DB connection, setting environment properties
        System.out.println("@BeforeClass: I run only once, before first test start.");

    }
 
    @AfterClass
    public void afterClass(){
        //Ideal place to perform some cleanup of setup which is shared among all tests.
        System.out.println("@AfterClass: I run only once, after all tests have been done.\n");

    }
 
    @BeforeMethod
    @Parameters({ "browser" })
    public void beforeEachTestMethod(@Optional("chrome") String browser) throws Exception{//Parameter are optional
    	
		helper = Helper.getInstance();
		driver = Helper.getDriver(browser);		
		driver.manage().window().setSize(new Dimension(1360, 1000));
		System.out.println("Starting test " + new Object() {}.getClass().getEnclosingMethod().getName());
        System.out.println("\n@BeforeMethod: I run before each test method. Test to be executed is : ");
        String customerNumber = helper.getProperty("erpCustomerNumber");
        helper.pickupOnDemandDelete(customerNumber);
        helper.pickupScheduledDelete(customerNumber);
    }
     
    @AfterMethod
    public void afterEachTestMethod(Method method) throws Exception{//Parameter are optional
		helper.takeScreenshot(driver, method.getName());
		driver.quit();
        System.out.println("@AfterMethod: I run after each test method. Test just executed is : "+method.getName()+"\n");
        
    }

	@Test

	public void adminCrmCrateOnDemandTest() throws Exception {
		String CreateDIA="3";
		String postalCode = "L4X2R3";
		helper.setDIA(postalCode, CreateDIA);
		helper.updateFiveToneAvailability(postalCode, false);
		helper.setAvailabilityByType(postalCode, "ADHOC, RECUR");
		String customerNumber = helper.getProperty("erpCustomerNumber");
		Components.adminToolLogin(driver, customerNumber);
		String testName= new Object() {}.getClass().getEnclosingMethod().getName();
		System.out.println("Starting test " + testName);
		helper.closeCookieBanner(driver);
		driver.findElement(By.id("createNewPickup")).click();
		Thread.sleep(2000);
		helper.closeCookieBanner(driver);
		Components.alternateAddress(driver, postalCode);
		Components.instructions(driver);
		//// buton continue
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(4000);
		Components.packingPallets(driver);
		Components.shipingServicesNoPayment(driver);
		//Submit page
		driver.findElement(By.id("packingSubmit")).click();	
		////date and time
		///Calendar
		Thread.sleep(5000);
		Components.onDemandPickuptime(driver);
		driver.findElement(By.id("datetimeSubmit")).click();
		Thread.sleep(8000); 
		driver.findElement(By.id("phoneNumber")).sendKeys("4444444444");
		/////submit request
		driver.findElement(By.id("crmSubmit")).click();
		WebDriverWait wait = new WebDriverWait(driver, 60);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("createNewBtn")));
		String ticketNumber = driver.findElement(By.id("createNewBtn")).getText();
		Assert.assertNotEquals("Ticket number should not be null",null, ticketNumber);
		helper.setDIA(postalCode, "0");
		helper.updateFiveToneAvailability(postalCode, true);
	}
	@Test

	public void adminCrmCrateScheduledTest() throws Exception {
		String CreateDIA="3";
		String postalCode = "L4X2R3";
		helper.setDIA(postalCode, CreateDIA);
		helper.updateFiveToneAvailability(postalCode, false);
		helper.setAvailabilityByType(postalCode, "ADHOC, RECUR");
		Components.adminToolLogin(driver, customerNumber);
		String testName= new Object() {}.getClass().getEnclosingMethod().getName();
		System.out.println("Starting test " + testName);
		helper.closeCookieBanner(driver);
		driver.findElement(By.id("createNewPickup")).click();
		Thread.sleep(2000);
		helper.closeCookieBanner(driver);

		Components.alternateAddress(driver, postalCode);	
		Components.pickScheduled(driver);
		Components.instructions(driver);
		//// buton continue
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(4000);
		Components.packingPallets(driver);
		//Submit page
		driver.findElement(By.id("packingSubmit")).click();	
		////date and time
		///Calendar
		Thread.sleep(5000);
		Components.scheduledPickuptime(driver);
		driver.findElement(By.id("datetimeSubmit")).click();
		WebDriverWait wait = new WebDriverWait(driver, 60);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("crmSubmit")));
		driver.findElement(By.id("phoneNumber")).sendKeys("4444444444");
		/////submit request
		Thread.sleep(2000);
		driver.findElement(By.id("crmSubmit")).click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("createNewBtn")));
		String ticketNumber = driver.findElement(By.id("createNewBtn")).getText();
		Assert.assertNotEquals("Ticket number should not be null",null, ticketNumber);
		helper.setDIA(postalCode, "0");
		helper.updateFiveToneAvailability(postalCode, true);
	}	
}