package com.parcelpickupFrontEnd;


import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.*;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;
import com.sharedlibrary.Components;
import com.sharedlibrary.Helper;



@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class CrmEditOnDemandTest {
	private static WebDriver driver;
	private static Helper helper;
	//private static String contactEmail;
	
    @BeforeClass
    public void beforeClass(){
        //Ideal place to perform some setup which is shared among all tests.
        //E.g. Initializing DB connection, setting environment properties
        System.out.println("@BeforeClass: I run only once, before first test start.");

    }
 
    @AfterClass
    public void afterClass(){
        //Ideal place to perform some cleanup of setup which is shared among all tests.
        System.out.println("@AfterClass: I run only once, after all tests have been done.\n");

    }

	@BeforeMethod
	@Parameters({ "browser" })
	public static void setUp(@Optional("chrome") String browser) throws Exception {
		helper = Helper.getInstance();
		driver = Helper.getDriver(browser);
		driver.manage().window().setSize(new Dimension(1360, 1000));
		System.out.println("Starting test " + new Object() {}.getClass().getEnclosingMethod().getName());
		driver.navigate().to(helper.getProperty("stagingHome"));
		String user = "erpUser";
		String password = "erpPassword";		
		String testName = "Starting test " + new Object() {}.getClass().getEnclosingMethod().getName();
		helper.signInCP(driver, user, password, testName);
		helper.pickupOnDemandDelete(helper.getProperty("erpCustomerNumber"));

	}
	
	@Test
	public void test1() throws Exception {
		String postalCode = "L4X2R3";
		String createDIA = "0";
		String editDIA = "3";
		boolean isAvailabileForEdit = true;
		boolean isCrmTickedCreated = false;
		int ExpectedFtf = 1;
		onDemandEditCRM(postalCode, createDIA, editDIA, isAvailabileForEdit, isCrmTickedCreated, ExpectedFtf);

	}

	@Test
	public void test2() throws Exception {
		String postalCode = "L4X2R3";
		String createDIA = "0";
		String editDIA = "0";
		boolean isAvailabileForEdit = false;
		boolean isCrmTickedCreated = true;
		int ExpectedFtf = 1;
		onDemandEditCRM(postalCode, createDIA, editDIA, isAvailabileForEdit, isCrmTickedCreated, ExpectedFtf);

	}

	@Test
	public void test3() throws Exception {
		String postalCode = "L4X2R3";
		String createDIA = "3";
		String editDIA = "3";
		boolean isAvailabileForEdit = true;
		boolean isCrmTickedCreated = false;
		int ExpectedFtf = 1;
		onDemandEditCRM(postalCode, createDIA, editDIA, isAvailabileForEdit, isCrmTickedCreated, ExpectedFtf);

	}

	@Test
	public void test4() throws Exception {
		String postalCode = "L4X2R3";
		String createDIA = "3";
		String editDIA = "0";
		boolean isAvailabileForEdit = false;
		boolean isCrmTickedCreated = true;
		int ExpectedFtf = 1;
		onDemandEditCRM(postalCode, createDIA, editDIA, isAvailabileForEdit, isCrmTickedCreated, ExpectedFtf);

	}

	@Test
	public void test5() throws Exception {
		String postalCode = "L4X2R3";
		String createDIA = "3";
		String editDIA = "0";
		boolean isAvailabileForEdit = true;
		boolean isCrmTickedCreated = false;
		int ExpectedFtf = 0;
		onDemandEditCRM(postalCode, createDIA, editDIA, isAvailabileForEdit, isCrmTickedCreated, ExpectedFtf);

	}

	private void onDemandEditCRM(String postalCode, String CreateDIA,String EditDIA,boolean isAvailabileForEdit, boolean isCrmTickedCreated, int ExpectedFtf) throws Exception {
		///Set DIA
		helper = Helper.getInstance();	
		helper.setAvailabilityByType(postalCode, "ADHOC, RECUR");
		helper.setDIA(postalCode, CreateDIA);
		helper.updateFiveToneAvailability(postalCode, true);
		String testName= new Object() {}.getClass().getEnclosingMethod().getName();
		System.out.println("Starting test " + testName);
		driver.navigate().to(helper.getProperty("parcelPickup"));
		helper.closeCookieBanner(driver);
		Components.alternateAddress(driver, postalCode);
		Components.instructions(driver);
		//// buton continue
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(4000);
		Components.packingPallets(driver);
		Components.shipingServicesNoPayment(driver);
		//Submit page
		driver.findElement(By.id("packingSubmit")).click();	
		////date and time
		///Calendar
		Thread.sleep(5000);
		Components.onDemandPickuptime(driver);
		driver.findElement(By.id("datetimeSubmit")).click();
		Thread.sleep(7000);
		Components.payment(driver, "account", "OD");
		driver.switchTo().defaultContent();
		WebDriverWait wait = new WebDriverWait(driver, 60);
		WebElement confirmationElement = wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("pickup-confirmation-number")));
		 String confirmation = confirmationElement.getText();
		 String[] parts = confirmation.split(": ");
		 String id = parts[1];
		 WebElement createRtnBtn = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("createRtnBtn")));
		 createRtnBtn.click();
		 Components.historyListview(driver);
//////////////EDIT
		helper.setDIA("L4X2R3", EditDIA);
		helper.updateFiveToneAvailability(postalCode, isAvailabileForEdit);
		 WebElement edit = wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("micro-edit")));
		 edit.click();
		driver.findElement(By.id("viewBtn")).click();
		 Thread.sleep(4000); ///viewBtn
		driver.findElement(By.id("contactSubmit")).click();
		Thread.sleep(4000);
		driver.findElement(By.id("packingSubmit")).click();
		Thread.sleep(2000);
		Components.onDemandPickuptime(driver);
		Thread.sleep(2000);
		driver.findElement(By.id("datetimeSubmit")).click();
		Thread.sleep(7000);
		((JavascriptExecutor) driver).executeScript("window.scrollTo(document.body.scrollHeight, 0)");
		Thread.sleep(1000);
		
		if (!isCrmTickedCreated) 
		{
		driver.findElement(By.id("reviewSubmit")).click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("pickup-confirmation-number")));
		confirmation = driver.findElement(By.className("pickup-confirmation-number")).getText();
		parts = confirmation.split(": ");
		id = parts[1];
		}
		else
		{
			Thread.sleep(8000); 
			driver.findElement(By.id("phoneNumber")).sendKeys("4444444444");
			/////submit request
			driver.findElement(By.id("crmSubmit")).click();//crmNumber
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("crmNumber")));
			String crmTicketNumber = driver.findElement(By.id("crmNumber")).getText();
			Assert.assertNotEquals("Ticket number should not be null",null, crmTicketNumber);
			String createNew = driver.findElement(By.id("createNewBtn")).getText();
			Assert.assertNotEquals("Ticket number should not be null",null, createNew);
		}	
		int ftf = helper.five_ton_flag(id);
		Assert.assertEquals(ExpectedFtf, ftf);	
	}

	@AfterMethod
	public static void closeBrowser() throws Exception {
		helper.takeScreenshot(driver, "CrmEditOnDemandTest");		
		driver.quit();
	}
}